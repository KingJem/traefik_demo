services:
  traefik:
    image: traefik:v3.5
    container_name: traefik
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true

    networks:
      # Connect to the 'traefik_proxy' overlay network for inter-container communication across nodes
      - traefik

    ports:
      - target: 80
        published: 80
        protocol: tcp
        mode: host

      - target: 443
        published: 443
        protocol: tcp
        mode: host

      - target: 8080
        published: 8080
        protocol: tcp
        mode: host

    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certs:/certs:ro
      - ./dynamic:/dynamic:ro

    command:
      # Data stat
      - "--global.sendanonymoususage=false"
      - "--global.checknewversion=false"



      # EntryPoints
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.web.http.redirections.entrypoint.permanent=true"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.websecure.http.tls=true"



      # Attach the static configuration tls.yaml file that contains the tls configuration settings
      - "--providers.file.filename=/dynamic/tls.yaml"

      # Providers
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=traefik"

      # API & Dashboard
      - "--api.dashboard=true"
      - "--api.insecure=false"

      # Enable api and dashboard. When
      - "--api=true"


      # Observability
      - "--log.level=INFO"
      - "--accesslog=true"
      - "--metrics.prometheus=true"

    # Traefik Dynamic configuration via Docker labels
    labels:
      # Enable self‑routing
      - "traefik.enable=true"

      # Dashboard router
#      - "traefik.http.routers.dashboard.rule=Host(`traefik.docker.localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      - "traefik.http.routers.dashboard.rule=Host(`traefik.docker.localhost`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.entrypoints=websecure"
      - "traefik.http.routers.dashboard.tls=true"


      # The dashboard can be accessed on http://traefik.example.com/dashboard/
#      rule = "Host(`traefik.example.com`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
      # API router
#      - "traefik.http.routers.dashboard.rule=Host(`traefik.docker.localhost`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
#      - "traefik.http.routers.dashboard.service=api@internal"
#      - "traefik.http.routers.dashboard.middlewares=auth"
#      - "traefik.http.routers.dashboard.entrypoints=websecure"
#      - "traefik.http.routers.dashboard.tls=true"


      # Basic‑auth middleware
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$apr1$$E16JI4Zb$$EV5SaFJdDj.0sEAp7eE4b1"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth@docker"

  # Whoami application
  whoami:
    image: traefik/whoami
    container_name: whoami
    restart: unless-stopped
    networks:
      - traefik
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whoami.rule=Host(`whoami.docker.localhost`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls=true"

      # step.1 定义名为 whoami-mw 的中间件
      - traefik.http.middlewares.whoami-mw.ratelimit.average=100       # 表示每秒钟平均处理100个请求
      - traefik.http.middlewares.whoami-mw.ratelimit.burst=150         # 表示每秒钟突发处理150个请求
      - traefik.http.middlewares.whoami-mw.ratelimit.period=10s        # 表示基准单位10秒，也可改为1m即一分钟等等，不填默认1秒
      # step.2 将 whoami-mw 中间件应用到 whoami-route 路由上
      - traefik.http.routers.whoami-route.middlewares=whoami-mw


networks:
  traefik:
    driver: bridge  # 网络驱动类型
    ipam:
      driver: default
      config:
        - subnet: 172.31.0.0/24  # 自定义子网
          gateway: 172.31.0.1    # 自定义网关
